---
vpc_id: $Network.Outputs.VPC
key_pair_names: $config.key_pair_names
all_subnets: [{{Network.Outputs.AllSubnets}}]
private_subnets: [{{Network.Outputs.PrivateSubnets}}]

#TODO: we can create prefix list for each subnet type in network.yaml
# Security groups are statueful, explicit rule for return traffic not required
security_groups:
  bastion:
    description: Bastion security group
    rules:
      # cidr, cidrv6, prefixList, securityGroup are exclusive and the meaning changes based on direction, this list is flattened and expanded by plugin security.py
      # { direction: ingress|egress, protocol: tcp|udp|icmp|icmpv6|All, ports: 80-90|All, cidr: 0.0.0.0/0, v6cidr: xxx:10, prefixList: abc, securityGroup: abc, securityGroupOwner: 1234}
      - { direction: ingress,  protocol: tcp, ports: 22, cidr: 0.0.0.0/0, description: "SSH to bastion" }
      - { direction: egress,  protocol: tcp, ports: 22, cidr: $config.vpc_cidr, description: "SSH from bastion" }
      - { direction: egress,  protocol: all, ports: all, cidr: 0.0.0.0/0, description: "Allow updates and other traffic" }
  publicElb:
    description: Security group for ELB to allow HTTP traffic
    rules:
      - { direction: ingress,  protocol: tcp, ports: 80, cidr: 0.0.0.0/0, description: "Allow public web" }
      - { direction: ingress,  protocol: tcp, ports: 443, cidr: 0.0.0.0/0, description: "Allow public web" }
      - { direction: egress,  protocol: UDP, ports: 123, cidr: 0.0.0.0/0, description: "Allow NTP Sync" }
      - { direction: egress,  protocol: TCP, ports: 80, cidr: $config.vpc_cidr, description: "Allow health checks" }
      - { direction: egress,  protocol: TCP, ports: 443, cidr: $config.vpc_cidr, description: "Allow health checks" }

  webServer:
    description: Allow host in public subnet to receive traffic from http and bastion
    rules:
      - { direction: ingress,  protocol: tcp, ports: 80, securityGroup: publicElb, description: "Allow public web" }
      - { direction: ingress,  protocol: tcp, ports: 443, securityGroup: publicElb, description: "Allow public web" }
      - { direction: ingress,  protocol: tcp, ports: 22, securityGroup: bastion, description: "Allow SSH from bastion" }
      - { direction: egress,  protocol: all, ports: all, cidr: 0.0.0.0/0, description: "Allow updates and other traffic" }

  appElb:
    description: Security group for ELB to allow HTTP traffic from web server to private ELB
    rules:
      - { direction: ingress,  protocol: tcp, ports: 80, securityGroup: webServer, description: "Allow HTTP from webserver" }
      - { direction: ingress,  protocol: tcp, ports: 443, securityGroup: webServer, description: "Allow HTTPS from webserver" }
      - { direction: egress,  protocol: UDP, ports: 123, cidr: 0.0.0.0/0, description: "Allow NTP Sync" }
      - { direction: egress,  protocol: TCP, ports: 80, cidr: $config.vpc_cidr, description: "Allow health checks" }
      - { direction: egress,  protocol: TCP, ports: 443, cidr: $config.vpc_cidr, description: "Allow health checks" }

  private:
    description: Security group for communication within private subnet
    rules:
      - { direction: ingress,  protocol: tcp, ports: 80, securityGroup: appElb, description: "Allow HTTP from appElb" }
      - { direction: ingress,  protocol: tcp, ports: 443, securityGroup: appElb, description: "Allow HTTPS from appElb" }
      - { direction: ingress,  protocol: tcp, ports: 22, securityGroup: bastion, description: "Allow SSH from bastion" }
      - { direction: egress,  protocol: all, ports: all, cidr: 0.0.0.0/0, description: "Allow updates and other traffic" }

  secretsManager:
    description: Security group for secret rotation
    rules:
      - { direction: ingress,  protocol: All, ports: All, securityGroup: secretsManager, description: "Self Ref" }
      - { direction: ingress,  protocol: tcp, ports: 443, securityGroup: private, description: "Allow instance in private subnet to access secrets" }

  rdspostgres:
    description: Security group for rds postgres restricted to private subnet
    rules:
      - { direction: ingress,  protocol: TCP, ports: 5432, securityGroup: private, description: "Allow DB traffic from private" }
      - { direction: egress,  protocol: UDP, ports: 123, cidr: 0.0.0.0/0, description: "Allow NTP Sync" }
---
AWSTemplateFormatVersion: '2010-09-09'
Description: Create required key pairs and security groups

Resources:
  {%- set fq_key_pair_names = [] %}
  {%- for key_pair_name in key_pair_names %}
    {%- set fq_key_pair_name = "%s_%s"|format(stack_name,key_pair_name) %}
    {%- set pub_key_material = context.get(key_pair_name+"_public_key") %}
  KeyPair{{key_pair_name}}:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: {{fq_key_pair_name}}
      PublicKeyMaterial: '{{pub_key_material}}'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
  {%- endfor %}

  {%- for security_group_name in security_groups.keys() %}
    {%- set description = security_groups[security_group_name]['description']|default(security_group_name) %}
    {%- set security_group = security_groups[security_group_name] %}
    {%- set ingress_rules = security_group['rules']['ingress'] %}
    {%- set egress_rules = security_group['rules']['egress'] %}
  SecurityGroup{{security_group_name}}:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId: {{vpc_id}}
      GroupName: !Join [ "", [ !Ref "AWS::StackName", "{{security_group_name}}" ] ]
  
      {%- for rule in ingress_rules %}
  SecurityGroup{{security_group_name}}Ingress{{rule['id']}}:
    DependsOn:
      - SecurityGroup{{security_group_name}}
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
        {%- if rule['cidr'] is defined %}
      CidrIp: '{{rule["cidr"]}}'
        {%- elif rule['v6cidr'] is defined %}
      CidrIpv6: '{{rule["v6cidr"]}}'
        {%- elif rule['prefixList'] is defined %}
      SourcePrefixListId: '{{rule["prefixList"]}}'
        {%- elif rule['securityGroup'] is defined %}
          {%- if security_groups[rule["securityGroup"]] is defined %}
      SourceSecurityGroupId: !Ref 'SecurityGroup{{rule["securityGroup"]}}'
          {%- else %}
      SourceSecurityGroupId: '{{rule["securityGroup"]}}'    
          {%- endif %}
        {%- else %}
      SourceSecurityGroupOwnerId: '{{rule["securityGroupOwner"]}}'
        {%- endif %}
      FromPort: '{{rule["from_port"]}}'
      ToPort: '{{rule["to_port"]}}'
      GroupId: !Ref 'SecurityGroup{{security_group_name}}'
      IpProtocol: '{{rule['protocol_num']}}'
        {%- if rule['description'] is defined %}
      Description: '{{rule['description']}}'
        {%- endif %}
      {%- endfor %}
          
      {%- for rule in egress_rules %}
  SecurityGroup{{security_group_name}}Egress{{rule['id']}}:
    DependsOn:
      - SecurityGroup{{security_group_name}}
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
        {%- if rule['cidr'] is defined %}
      CidrIp: '{{rule["cidr"]}}'
        {%- elif rule['v6cidr'] is defined %}
      CidrIpv6: '{{rule["v6cidr"]}}'
        {%- elif rule['prefixList'] is defined %}
      DestinationPrefixListId: '{{rule["prefixList"]}}'
        {%- elif rule['securityGroup'] is defined %}
          {%- if security_groups[rule["securityGroup"]] is defined %}
      DestinationSecurityGroupId: !Ref 'SecurityGroup{{rule["securityGroup"]}}'
          {%- else %}
      DestinationSecurityGroupId: '{{rule["securityGroup"]}}'    
          {%- endif %}
        {%- endif %}
      FromPort: '{{rule["from_port"]}}'
      ToPort: '{{rule["to_port"]}}'
      GroupId: !Ref 'SecurityGroup{{security_group_name}}'
      IpProtocol: '{{rule['protocol_num']}}'
        {%- if rule['description'] is defined %}
      Description: '{{rule['description']}}'
        {%- endif %}
      {%- endfor %}
  {%- endfor %}
          
  SecretsManagerVPCEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      PrivateDnsEnabled: true
      VpcId: {{vpc_id}}
      SubnetIds: {{private_subnets}}
      SecurityGroupIds:
      - !Ref SecurityGroupsecretsManager
      ServiceName: !Join
      - ''
      - - com.amazonaws.
        - !Ref 'AWS::Region'
        - .secretsmanager

Outputs:
{%- for key_pair_name in key_pair_names %}
  {%- set fq_key_pair_name = "%s_%s"|format(stack_name,key_pair_name) %}
  KeyPair{{key_pair_name}}:
    Description: Key pair for {{key_pair_name}}
    Value: {{fq_key_pair_name}}
{%- endfor %}
{%- for security_group_name in security_groups %}
  SecurityGroup{{security_group_name}}:
    Description: Security Group for {{security_group_name}}
    Value: !Ref 'SecurityGroup{{security_group_name}}'
{%- endfor %}
  SecretManagerVPCEndpoint:
    Value: !Ref SecretsManagerVPCEndpoint