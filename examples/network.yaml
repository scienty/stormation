
---

vpc_cidr: {{config.vpc_cidr}}
igw: true
subnets:
  Mgmt:
    subnet_type: management
    cidr_blocks: $config.mgmt_subnet_blocks
    availability_zones: $config.availability_zones
    default_route: internet
    acl:
      - { action: allow, direction: ingress,  protocol: [ TCP,UDP ], ports: 1024-65535, cidr: 0.0.0.0/0, description: "Allow all return traffic v4"}
      - { action: allow, direction: ingress,  protocol: [ TCP,UDP ], ports: 1024-65535, v6cidr: '::/0', description: "Allow all return traffic v6"}
      - { action: allow, direction: egress,   protocol: [ TCP,UDP ], ports: 0-65535, cidr: 0.0.0.0/0, description: "Allow all outgoing TCP/UDP v4"}
      - { action: allow, direction: egress,   protocol: [ TCP,UDP ], ports: 0-65535, v6cidr: '::/0', description: "Allow all outgoing TCP/UDP v6"}
      #- { action: allow, direction: ingress,  protocol: TCP, cidr: $config.home_networks, ports: 22, description: "Allow SSH from home networks"}
      - { action: allow, direction: ingress,  protocol: TCP, cidr: 0.0.0.0/0, ports: 22, description: "Allow SSH from home networks" }
      - { action: allow, direction: [ ingress,egress ], protocol: ICMP, cidr: $config.vpc_cidr, ports: all, description: "Allow ICMP withing vpc"}
    routes:
      - { cidr: 0.0.0.0/0, gateway: igw }

  Public:
    subnet_type: public
    cidr_blocks: {{config.public_subnet_blocks}}
    availability_zones: $config.availability_zones
    default_route: internet
    acl:
      - { action: allow, direction: ingress,  protocol: [ TCP,UDP ], ports: 1024-65535, cidr: 0.0.0.0/0, description: "Allow all return traffic v4" }
      - { action: allow, direction: ingress,  protocol: [ TCP,UDP ], ports: 1024-65535, v6cidr: '::/0', description: "Allow all return traffic v6" }
      - { action: allow, direction: egress,   protocol: [ TCP,UDP ], ports: 0-65535, cidr: 0.0.0.0/0, description: "Allow all outgoing TCP/UDP v4" }
      - { action: allow, direction: egress,   protocol: [ TCP,UDP ], ports: 0-65535, v6cidr: '::/0', description: "Allow all outgoing TCP/UDP v6" }
      - { action: allow, direction: ingress,  protocol: TCP, cidr: $config.mgmt_subnet_blocks, ports: 22, description: "Allow SSH from mgmt subnet"}
      - { action: allow, direction: ingress,  protocol: TCP, cidr: 0.0.0.0/0, ports: [ 80,443 ], description: "Allow HTTP traffic to ELB/ALB"}
      - { action: allow, direction: [ ingress,egress ], protocol: ICMP, cidr: $config.vpc_cidr, ports: all, description: "Allow ICMP withing vpc"}
    routes:
      - { cidr: 0.0.0.0/0, gateway: igw }

  Webtier:
    subnet_type: private
    cidr_blocks: $config.webtier_subnet_blocks
    availability_zones: $config.availability_zones
    default_route: nat_gw
    acl:
      - { action: allow, direction: ingress,  protocol: [ TCP,UDP ], ports: 1024-65535, cidr: 0.0.0.0/0, description: "Allow all return traffic v4" }
      - { action: allow, direction: ingress,  protocol: [ TCP,UDP ], ports: 1024-65535, v6cidr: '::/0', description: "Allow all return traffic v6" }
      - { action: allow, direction: egress,   protocol: [ TCP,UDP ], ports: 0-65535, cidr: 0.0.0.0/0, description: "Allow all outgoing TCP/UDP v4" }
      - { action: allow, direction: egress,   protocol: [ TCP,UDP ], ports: 0-65535, v6cidr: '::/0', description: "Allow all outgoing TCP/UDP v6" }
      - { action: allow, direction: ingress,  protocol: TCP, cidr: $config.mgmt_subnet_blocks, ports: 22, description: "Allow SSH from mgmt subnet" }
      - { action: allow, direction: ingress,  protocol: TCP, cidr: $config.public_subnet_blocks, ports: [ 80,443 ], description: "Allow HTTP traffic from public subnet" }
      - { action: allow, direction: ingress,  protocol: TCP, cidr: $config.mgmt_subnet_blocks, ports: [ 80,443 ], description: "Allow HTTP traffic from mgmt subnet" }
      - { action: allow, direction: [ ingress,egress ], protocol: ICMP, cidr: $config.vpc_cidr, ports: all, description: "Allow ICMP withing vpc" }
    routes:
      - { cidr: 0.0.0.0/0, nat_gateway: nat_gw, }

  Private:
    subnet_type: private
    cidr_blocks: $config.private_subnet_blocks
    availability_zones: $config.availability_zones
    default_route: nat_gw
    acl:
      - { action: allow, direction: ingress,  protocol: [ TCP,UDP ], ports: 1024-65535, cidr: 0.0.0.0/0, description: "Allow all return traffic v4" }
      - { action: allow, direction: ingress,  protocol: [ TCP,UDP ], ports: 1024-65535, v6cidr: '::/0', description: "Allow all return traffic v6" }
      - { action: allow, direction: egress,   protocol: [ TCP,UDP ], ports: 0-65535, cidr: 0.0.0.0/0, description: "Allow all outgoing TCP/UDP v4" }
      - { action: allow, direction: egress,   protocol: [ TCP,UDP ], ports: 0-65535, v6cidr: '::/0', description: "Allow all outgoing TCP/UDP v6" }
      - { action: allow, direction: ingress,  protocol: TCP, cidr: $config.mgmt_subnet_blocks, ports: 22, description: "Allow SSH from mgmt subnet"}
      - { action: allow, direction: ingress,  protocol: TCP, cidr: $config.webtier_subnet_blocks, ports: 0-65535 , description: "Allow all traffic from webtier subnet"}
      - { action: allow, direction: [ ingress,egress ], protocol: ICMP, cidr: $config.vpc_cidr, ports: all, description: "Allow ICMP withing vpc"}
    routes:
      - { cidr: 0.0.0.0/0, nat_gateway: nat_gw, }


---

AWSTemplateFormatVersion: '2010-09-09'
Description: Create VPC and InternetGateway and a public subnet

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: {{ vpc_cidr }}
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'
  {%- if igw|default(False) %}
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref 'AWS::StackName'
  VPCGatewayAttachment:
    DependsOn:
    - VPC
    - InternetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  {%- endif %}

  {%- set nat_gws = [] %}
  {%- set output_subnets = {} %}
  {%- for subnet_def_name in subnets.keys() %}
    {%- set subnet_loop = loop %}
    {%- set _ = output_subnets.update({subnet_def_name: []}) %}
    {%- set subnet_def = subnets[subnet_def_name] %}
    {%- set subnet_type = subnet_def['subnet_type'] %}
    {%- set cidr_blocks = subnet_def['cidr_blocks'] %}
    {%- set availability_zones = subnet_def['availability_zones'] %}
    {%- set acl = subnet_def['acl'] %}
    {%- set routes = subnet_def['routes'] %}
    {%- set default_route = subnet_def['default_route']|default('None') %}
    {%- set nat_gw_count = subnet_def['nat_gw_count']|default(0) %}
    {%- for cidr_block in cidr_blocks %}
        {%- set cidr_loop = loop %}
        {%- set subnet_suffix = "%s%s"|format(subnet_def_name,cidr_loop.index0) %}
        {%- set availability_zone = availability_zones[(loop.index0)%(availability_zones|length)] %}
        {%- set az_suffix = availability_zone | replace("-","") %}
        {%- set subnet_name = 'Subnet'+subnet_suffix %}
        {%- set __ = output_subnets[subnet_def_name].append(subnet_name) %}
  
  {{subnet_name}}:
    DependsOn:
    - VPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: {{cidr_block}}
      AvailabilityZone: {{ availability_zone }}
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', {{subnet_suffix}}]]
      - Key: SubnetType
        Value: {{subnet_type}}
        {%- if subnet_type=='public' and az_suffix not in nat_gws %}
        {%- set __ = nat_gws.append(az_suffix) %}
  EIPNat{{az_suffix}}:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NATGateway{{az_suffix}}:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [EIPNat{{az_suffix}}, AllocationId]
      SubnetId: !Ref 'Subnet{{subnet_suffix}}'
        {%- endif %}
  RouteTable{{subnet_suffix}}:
    DependsOn:
    - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', {{subnet_suffix}}]]
  RouteTableAssociation{{subnet_suffix}}:
    DependsOn:
    - Subnet{{subnet_suffix}}
    - RouteTable{{subnet_suffix}}
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'Subnet{{subnet_suffix}}'
      RouteTableId: !Ref 'RouteTable{{subnet_suffix}}'
        {%- if default_route %}
  RouteDefault{{subnet_suffix}}:
    DependsOn:
    - RouteTable{{subnet_suffix}}
          {%- if default_route == 'internet' %}
    - InternetGateway
            {%- endif %}
           {%- if default_route ==  'nat_gw' %}
    - NATGateway{{az_suffix}}
            {%- endif %}
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'RouteTable{{subnet_suffix}}'
      DestinationCidrBlock: 0.0.0.0/0
            {%- if default_route == 'internet' %}
      GatewayId: !Ref 'InternetGateway'
            {%- endif %}
            {%- if default_route ==  'nat_gw' %}
      NatGatewayId: !Ref 'NATGateway{{az_suffix}}'
            {%- endif %}
        {% endif %}
  NetworkAcl{{subnet_suffix}}:
    DependsOn:
    - VPC
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', {{subnet_suffix}}]]
  AclAssociationSubnet{{subnet_suffix}}:
    DependsOn:
    - Subnet{{subnet_suffix}}
    - NetworkAcl{{subnet_suffix}}
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref 'Subnet{{subnet_suffix}}'
      NetworkAclId: !Ref 'NetworkAcl{{subnet_suffix}}' 
        {%- for acl_entry in acl %}
  NetworkAclEntry{{subnet_suffix}}{{loop.index0}}:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref 'NetworkAcl{{subnet_suffix}}'
      RuleNumber: {{100+(loop.index0*5)}}
      Protocol: '{{acl_entry.protocol_num}}'
      RuleAction: {{acl_entry.action}}
      Egress: '{{acl_entry.egress}}'
      {%if acl_entry.cidr|default(False) -%}
      CidrBlock: {{acl_entry.cidr}}
      {%- endif %}
      {%if acl_entry.v6cidr|default(False) -%}
      Ipv6CidrBlock: {{acl_entry.v6cidr}}
      {%- endif %}
      {%if acl_entry.icmpCode|default(False) -%}
      Icmp: 
        Type: {{acl_entry.icmpType}}
        Code: {{acl_entry.icmpCode}}
      {%- endif %}
      PortRange:
        From: '{{acl_entry.port_from}}'
        To: '{{acl_entry.port_to}}'
        {%- endfor %}
    {%- endfor %}
  {%- endfor %}
  
Outputs:
  VPC:
    Description: ID of the VPC
    Value: !Ref 'VPC'
  InternetGateway:
    Description: ID of the InternetGateway
    Value: !Ref 'InternetGateway'
  {% for k, v in output_subnets.items() -%}
  {{k}}Subnets:
    Description: List of {{k}} Subnets
    Value: !Join [ ',', [{% for subnet_name in v %}!Ref {{subnet_name}},{% endfor %}]]
  {% endfor %}
  AllSubnets:
    Description: List of All Subnets
    Value: !Join [ ',', [{% for subnet_name in output_subnets.values()|flatten %}!Ref {{subnet_name}},{% endfor %}]]
