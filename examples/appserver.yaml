---
vpc_id: $Network.Outputs.VPC
public_subnets: [{{Network.Outputs.PublicSubnets}}]
private_subnets: [{{Network.Outputs.PrivateSubnets}}]
ec2_type: t2.medium
key_pair_name: $Security.Outputs.KeyPairworkload
elb_security_group: $Security.Outputs.SecurityGroupappElb
app_server_security_group: $Security.Outputs.SecurityGroupprivate
email_notification_topic: $Common.Outputs.EmailNotificationTopic
---

AWSTemplateFormatVersion: '2010-09-09'
Description: Create Bastion host in Management subnet

Resources:
  AppServerInstanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeployLimited"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/SecretsManagerReadWrite"

  AppServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref AppServerInstanceIamRole

  AppServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      Comment: Install Update files
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 00_setup
        00_setup: # in the following order: packages, groups, users, sources, files, commands, and then services.
          files:
            "/home/ubuntu/update-awscli":
              content: |
                #!/bin/bash
                cd /tmp
                rm -f awscliv2.zip
                if (arch | grep -q x86); then
                  curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
                else
                  curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
                fi
                unzip -q -o awscliv2.zip
                /usr/bin/aws --version
                sudo ./aws/install --update -b /usr/bin
                /usr/bin/aws --version
                
                echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/ubuntu/.bashrc
              mode: "000755"
              owner: "ubuntu"
              group: "ubuntu"
            "/opt/aws/amazon-cloudwatch-agent/bin/config.json":
              content: |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "run_as_user": "cwagent"
                  },
                  "metrics": {
                    "aggregation_dimensions": [
                      [
                        "InstanceId"
                      ]
                    ],
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "disk": {
                        "measurement": [
                          "used_percent"
                        ],
                        "metrics_collection_interval": 60,
                          "resources": [
                            "/"
                          ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 60
                      },                
                      "diskio": {
                        "measurement": [
                          "io_time"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                          "nvme0n1"
                        ]
                      },
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 60,
                        "totalcpu": false
                      }
                    }
                  },
                  "traces": {
                    "buffer_size_mb": 3,
                    "concurrency": 8,
                    "insecure": false,
                    "traces_collected": {
                      "xray": {
                        "bind_address": "127.0.0.1:2000",
                        "tcp_proxy": {
                          "bind_address": "127.0.0.1:2000"
                        }
                      }
                    }
                  }
                }
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            update-awscli:
              command: /usr/bin/bash /home/ubuntu/update-awscli

    Properties:
      LaunchTemplateName: {{stack_name|lower}}-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref AppServerInstanceProfile
        ImageId: '{{"{{"}}resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id{{"}}"}}'
        InstanceType: {{ec2_type}}
        KeyName: {{key_pair_name}}
        SecurityGroupIds:
          - {{app_server_security_group}}
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            
            # disable IPv6 during setup
            sysctl -w net.ipv6.conf.all.disable_ipv6=1
            sysctl -w net.ipv6.conf.default.disable_ipv6=1
            
            # https://stackoverflow.com/questions/33370297/apt-get-update-non-interactive
            export DEBIAN_FRONTEND=noninteractive
            
            apt-get clean all
            apt-get update -q
            apt-get upgrade -q -y
            # remove AWSCLI version 1
            apt-get remove -q -y awscli
            apt-get autoremove -q -y
            apt-get install -q -y wget unzip tar curl sed git
            
            mkdir -p /tmp/cfn
            cd /tmp/cfn\
            
            apt-get install -q -y wget unzip tar curl sed git
            
            # CfN scripts: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
            apt-get install -q -y python3 python3-pip python3-setuptools python3-docutils python3-daemon
            curl -s -L -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            tar -xf aws-cfn-bootstrap-py3-latest.tar.gz
            cd aws-cfn-bootstrap-2.0
            python3 setup.py build
            python3 setup.py install
            cd /tmp/cfn
            
            export CFN_INIT="python3 /usr/local/bin/cfn-init"
            $CFN_INIT -v --stack ${AWS::StackName} --resource AppServerLaunchTemplate --region ${AWS::Region} -c setup
            
            
            # Certbot
            apt-get install -q -y certbot
            apt-get install -q -y python3-certbot-dns-route53 python-certbot-dns-route53-doc 
            
            # CodeDeploy agent: https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-ubuntu.html
            apt-get install -q -y ruby-full
            curl -s -L -O https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            
            # CloudWatch agent: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-EC2-Instance.html
            if (uname -a | grep -q x86); then
              curl -s -L -O https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            else
              curl -s -L -O https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb
            fi
            apt-get install -q -y ./amazon-cloudwatch-agent.deb
  
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
            systemctl enable amazon-cloudwatch-agent
            systemctl start amazon-cloudwatch-agent
            
            echo "<h1>Hello World!</h1>" > /var/www/html/index.html
            
            pip install aws-secretsmanager-caching
            
            # enable back IPv6
            sysctl -w net.ipv6.conf.all.disable_ipv6=0
            sysctl -w net.ipv6.conf.default.disable_ipv6=0

  AppServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref AppServerLaunchTemplate
        Version: !GetAtt AppServerLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      NotificationConfigurations:
        - TopicARN: {{email_notification_topic}}
          NotificationTypes: [ 'autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', 'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR' ]
      TargetGroupARNs:
        - !Ref EC2TargetGroupHTTP
      VPCZoneIdentifier: {{private_subnets}}

  EC2TargetGroupHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Name: EC2TargetGroupHTTP
      Port: 80
      Protocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: {{vpc_id}}

  AppNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: 'network'
      Scheme: internet-facing
      Subnets: {{private_subnets}}
      SecurityGroups:
        - {{elb_security_group}}
  AppNLBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroupHTTP
      LoadBalancerArn: !Ref AppNetworkLoadBalancer
      Port: 80
      Protocol: TCP

Outputs:
  AppLoadBalancer:
    Description: App Network Load Balancer
    Value: !Ref AppNetworkLoadBalancer