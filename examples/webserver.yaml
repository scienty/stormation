---
vpc_id: $Network.Outputs.VPC
public_subnets: [{{Network.Outputs.PublicSubnets}}]
webtier_subnets: [{{Network.Outputs.WebtierSubnets}}]
ec2_ami: $config.bastion_ami
ec2_type: t2.medium
key_pair_name: $Security.Outputs.KeyPairworkload
elb_security_group: $Security.Outputs.SecurityGrouppublicElb
web_server_security_group: $Security.Outputs.SecurityGroupwebServer
email_notification_topic: $Common.Outputs.EmailNotificationTopic
app_server_dns_name: $AppServer.Outputs.AppLoadBalancerDNSName
---

AWSTemplateFormatVersion: '2010-09-09'
Description: Create web server with reverse proxy

Resources:
  WebAppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: {{stack_name|lower}}-bucket
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  WebServerInstanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: [ "sts:AssumeRole" ]
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeployLimited"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
      Policies:
        - PolicyName: MountPointS3Access
          PolicyDocument: # MountPoint for S3: https://github.com/awslabs/mountpoint-s3/blob/main/doc/CONFIGURATION.md
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${bucketName}"
                  - bucketName: !Ref WebAppS3Bucket
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:AbortMultipartUpload
                  - s3:DeleteObject
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${bucketName}/*"
                  - bucketName: !Ref WebAppS3Bucket
        - PolicyName: MountPointS3ExpressAccess
          PolicyDocument: # MountPoint for S3: https://github.com/awslabs/mountpoint-s3/blob/main/doc/CONFIGURATION.md
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3express:CreateSession
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3express:${AWS::Region}:${AWS::AccountId}:bucket/${bucketName}--az_id--x-s3"
                  - bucketName: !Ref WebAppS3Bucket

  WebServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref WebServerInstanceIamRole

  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      Comment: Install Update files
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - 00_setup
        00_setup: # in the following order: packages, groups, users, sources, files, commands, and then services.
          files:
            "/home/ubuntu/update-awscli":
              content: |
                #!/bin/bash
                cd /tmp
                rm -f awscliv2.zip
                if (arch | grep -q x86); then
                  curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
                else
                  curl https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip -o awscliv2.zip
                fi
                unzip -q -o awscliv2.zip
                /usr/bin/aws --version
                sudo ./aws/install --update -b /usr/bin
                /usr/bin/aws --version
                
                echo "export AWS_CLI_AUTO_PROMPT=on-partial" >> /home/ubuntu/.bashrc
              mode: "000755"
              owner: "ubuntu"
              group: "ubuntu"
            "/home/ubuntu/update-mountpoint-s3":
              content: |
                #!/bin/bash
                cd /tmp
                rm -f ./mount-s3.deb
                if (uname -a | grep -q x86); then
                  wget -4 https://s3.amazonaws.com/mountpoint-s3-release/latest/x86_64/mount-s3.deb
                else
                  wget -4 https://s3.amazonaws.com/mountpoint-s3-release/latest/arm64/mount-s3.deb
                fi
                sudo apt-get install -y ./mount-s3.deb
              mode: "000755"
              owner: "ubuntu"
              group: "ubuntu"
            "/etc/systemd/system/mount-s3-helper.service":
              content: |
                # https://github.com/awslabs/mountpoint-s3/blob/main/doc/CONFIGURATION.md#automatically-mounting-an-s3-bucket-at-boot
                [Unit]
                Description=Mountpoint for S3 helper
                Wants=network.target
                
                [Service]
                Restart=on-failure
                RestartSec=5
                Type=forking
                ExecStart=/opt/mount-s3-helper.sh
                ExecStop=/usr/bin/fusermount -u /mnt/s3-bucket-mount
                
                [Install]
                WantedBy=remote-fs.target
              mode: "000644"
              owner: "root"
              group: "root"
            "/opt/mount-s3-helper.sh":
              content: !Sub
                - |
                  #!/bin/bash
                  S3_BUCKET_NAME=${S3_BUCKET_NAME}
                  MOUNT_FOLDER=/mnt/s3-bucket-mount
                  USER=ubuntu
                  GROUP=www-data
                  
                  USERID=$(cat /etc/passwd | grep ^$USER: | head -n 1 | cut -d":" -f 3)
                  GROUPID=$(cat /etc/group | grep ^$GROUP: | head -n 1 | cut -d":" -f 3)
                  
                  mkdir -p $MOUNT_FOLDER
                  /usr/bin/mount-s3 --uid $USERID --gid $GROUPID --allow-overwrite --allow-delete --allow-other $S3_BUCKET_NAME $MOUNT_FOLDER
                - S3_BUCKET_NAME: !Ref WebAppS3Bucket
              mode: "000744"
              owner: "root"
              group: "root"
            "/opt/aws/amazon-cloudwatch-agent/bin/config.json":
              content: |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "run_as_user": "cwagent"
                  },
                  "metrics": {
                    "aggregation_dimensions": [
                      [
                        "InstanceId"
                      ]
                    ],
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "disk": {
                        "measurement": [
                          "used_percent"
                        ],
                        "metrics_collection_interval": 60,
                          "resources": [
                            "/"
                          ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ],
                        "metrics_collection_interval": 60
                      },                
                      "diskio": {
                        "measurement": [
                          "io_time"
                        ],
                        "metrics_collection_interval": 60,
                        "resources": [
                          "nvme0n1"
                        ]
                      },
                      "cpu": {
                        "measurement": [
                          "cpu_usage_idle",
                          "cpu_usage_iowait",
                          "cpu_usage_user",
                          "cpu_usage_system"
                        ],
                        "metrics_collection_interval": 60,
                        "totalcpu": false
                      }
                    }
                  },
                  "traces": {
                    "buffer_size_mb": 3,
                    "concurrency": 8,
                    "insecure": false,
                    "traces_collected": {
                      "xray": {
                        "bind_address": "127.0.0.1:2000",
                        "tcp_proxy": {
                          "bind_address": "127.0.0.1:2000"
                        }
                      }
                    }
                  }
                }
              mode: "000644"
              owner: "root"
              group: "root"
            "//etc/nginx/sites-available/default":
              content: |
                server {
                  listen 80 default_server;
                  listen [::]:80 default_server;
              
                  server_name _;
              
                  root /mnt/s3-bucket-mount/html;
              
                  index index.html index.htm;
              
                  location / {
                      # First attempt to serve request as file, then
                      # as directory, then fall back to displaying a 404.
                      try_files $uri $uri/ =404;
                  }
              
                  location /api/ {
                    proxy_pass http://{{app_server_dns_name}}/;
                    include proxy_params;
                  }
                }
              mode: "000644"
              owner: "root"
              group: "root"
          commands:
            update-awscli:
              command: /usr/bin/bash /home/ubuntu/update-awscli
            update-mountpoint-s3:
              command: /usr/bin/bash /home/ubuntu/update-mountpoint-s3

          services:
            systemd:
              mount-s3-helper:
                enabled: "true"
                ensureRunning: "true"

    Properties:
      LaunchTemplateName: {{stack_name|lower}}-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref WebServerInstanceProfile
        ImageId: '{{"{{"}}resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id{{"}}"}}'
        InstanceType: {{ec2_type}}
        KeyName: {{key_pair_name}}
        SecurityGroupIds:
          - {{web_server_security_group}}
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            
            # disable IPv6 during setup
            sysctl -w net.ipv6.conf.all.disable_ipv6=1
            sysctl -w net.ipv6.conf.default.disable_ipv6=1
            
            # https://stackoverflow.com/questions/33370297/apt-get-update-non-interactive
            export DEBIAN_FRONTEND=noninteractive
            
            apt-get clean all
            apt-get update -q
            apt-get upgrade -q -y
            # remove AWSCLI version 1
            apt-get remove -q -y awscli
            apt-get autoremove -q -y
            apt-get install -q -y wget unzip tar curl sed git
            
            apt-get install -q -y python3-certbot-nginx
            apt-get install -q -y nginx-full
            
            mkdir -p /tmp/cfn
            cd /tmp/cfn
            
            # CfN scripts: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
            apt-get install -q -y python3 python3-pip python3-setuptools python3-docutils python3-daemon
            curl -s -L -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            tar -xf aws-cfn-bootstrap-py3-latest.tar.gz
            cd aws-cfn-bootstrap-2.0
            python3 setup.py build
            python3 setup.py install
            
            cd /tmp/cfn
            
            # CodeDeploy agent: https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-ubuntu.html
            apt-get install -q -y ruby-full
            curl -s -L -O https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto
            
            export CFN_INIT="python3 /usr/local/bin/cfn-init"
            $CFN_INIT -v --stack ${AWS::StackName} --resource WebServerLaunchTemplate --region ${AWS::Region} -c setup
            
            # Certbot
            apt-get install -q -y certbot
            apt-get install -q -y python3-certbot-dns-route53 python-certbot-dns-route53-doc 
            
            # CloudWatch agent: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-EC2-Instance.html
            if (uname -a | grep -q x86); then
              curl -s -L -O https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            else
              curl -s -L -O https://s3.${AWS::Region}.amazonaws.com/amazoncloudwatch-agent-${AWS::Region}/ubuntu/arm64/latest/amazon-cloudwatch-agent.deb
            fi
            apt-get install -q -y ./amazon-cloudwatch-agent.deb
            
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json -s
            systemctl daemon-reload
            systemctl enable amazon-cloudwatch-agent
            systemctl start amazon-cloudwatch-agent
            
            systemctl enable nginx
            systemctl restart nginx
            
            mkdir -p /mnt/s3-bucket-mount/html
            echo "<html>Hello World<html>" > /mnt/s3-bucket-mount/html/index.html
            
            # enable back IPv6
            sysctl -w net.ipv6.conf.all.disable_ipv6=0
            sysctl -w net.ipv6.conf.default.disable_ipv6=0

  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLaunchTemplate
        Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      NotificationConfigurations:
        - TopicARN: {{email_notification_topic}}
          NotificationTypes: [ 'autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR', 'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR' ]
      TargetGroupARNs:
        - !Ref WebAppEC2TargetGroupHTTP
        - !Ref WebAppEC2TargetGroupHTTPS
      VPCZoneIdentifier: {{webtier_subnets}}
      Tags:
        - Key: Name
          Value: !Ref "AWS::StackName"
          PropagateAtLaunch: true

  WebAppEC2TargetGroupHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: WebAppEC2TargetGroupHTTP
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: {{vpc_id}}
  WebAppEC2TargetGroupHTTPS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: WebAppEC2TargetGroupHTTPS
      Port: 443
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      UnhealthyThresholdCount: 3
      VpcId: {{vpc_id}}
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: {{public_subnets}}
      SecurityGroups:
        - {{elb_security_group}}
  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppEC2TargetGroupHTTP
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
#  ALBListenerHTTPS:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref WebAppEC2TargetGroupHTTPS
#      LoadBalancerArn: !Ref ApplicationLoadBalancer
#      Port: 443
#      Protocol: HTTPS
  WebServerWebAcl:
    Type: AWS::WAFv2::WebACL
    Properties:
      Description: Web ACL for Application Load Balancer of webapp and appserver
      Name: !Ref "AWS::StackName"
      DefaultAction:
        Allow: {}
      Rules:
        - Name: AWS-CRS
          Priority: 0
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
              ExcludedRules: [ ]
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName:
              Fn::Sub: "${AWS::StackName}-aws-crs-metric"
        - Name: Bad-Inputs
          Priority: 1
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
              ExcludedRules: [ ]
          OverrideAction:
            None: { }
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName:
              Fn::Sub: "${AWS::StackName}-bad-inputs-metric"
        - Name: Anonymous-IpList
          Priority: 2
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAnonymousIpList
              ExcludedRules: [ ]
          OverrideAction:
            None: { }
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName:
              Fn::Sub: "${AWS::StackName}-anonymous-iplist-metric"
        - Name: IPReputation-IpList
          Priority: 3
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
              ExcludedRules: [ ]
          OverrideAction:
            None: { }
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName:
              Fn::Sub: "${AWS::StackName}-ip-reputation-list-metric"
        - Name: Linux-Operating-System
          Priority: 4
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesUnixRuleSet
              ExcludedRules: [ ]
          OverrideAction:
            None: { }
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName:
              Fn::Sub: "${AWS::StackName}-linux-os"
        - Name: SQLInject-RuleSet
          Priority: 5
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
          OverrideAction:
            None: { }
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName:
              Fn::Sub: "${AWS::StackName}-SQLinjection-ruleset-metric"
      Scope: REGIONAL
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${AWS::StackName} App Web ACL"
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName:
          Fn::Sub: "${AWS::StackName}-web-owasp-metric"
  WebAppAlbWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref "ApplicationLoadBalancer"
      WebACLArn: !GetAtt WebServerWebAcl.Arn
Outputs:
  Sample:
    Description: Sample
    Value: 'Sample'